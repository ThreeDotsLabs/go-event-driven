// Package receipts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package receipts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// CreateReceipt defines model for CreateReceipt.
type CreateReceipt struct {
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	Price          Money   `json:"price"`
	TicketId       string  `json:"ticket_id"`
}

// Money defines model for Money.
type Money struct {
	MoneyAmount   string `json:"money_amount"`
	MoneyCurrency string `json:"money_currency"`
}

// Receipt defines model for Receipt.
type Receipt struct {
	IdempotencyKey *string   `json:"idempotency_key,omitempty"`
	IssuedAt       time.Time `json:"issued_at"`
	Number         string    `json:"number"`
	Price          Money     `json:"price"`
	TicketId       string    `json:"ticket_id"`
	VoidReason     *string   `json:"void_reason,omitempty"`
	Voided         *bool     `json:"voided,omitempty"`
}

// VoidReceiptRequest defines model for VoidReceiptRequest.
type VoidReceiptRequest struct {
	IdempotentId *string `json:"idempotent_id,omitempty"`
	Reason       string  `json:"reason"`
	TicketId     string  `json:"ticket_id"`
}

// PutReceiptsJSONRequestBody defines body for PutReceipts for application/json ContentType.
type PutReceiptsJSONRequestBody = CreateReceipt

// PutVoidReceiptJSONRequestBody defines body for PutVoidReceipt for application/json ContentType.
type PutVoidReceiptJSONRequestBody = VoidReceiptRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetReceipts request
	GetReceipts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReceipts request with any body
	PutReceiptsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReceipts(ctx context.Context, body PutReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVoidReceipt request with any body
	PutVoidReceiptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVoidReceipt(ctx context.Context, body PutVoidReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetReceipts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReceiptsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReceiptsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReceipts(ctx context.Context, body PutReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReceiptsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVoidReceiptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVoidReceiptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVoidReceipt(ctx context.Context, body PutVoidReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVoidReceiptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetReceiptsRequest generates requests for GetReceipts
func NewGetReceiptsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutReceiptsRequest calls the generic PutReceipts builder with application/json body
func NewPutReceiptsRequest(server string, body PutReceiptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReceiptsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutReceiptsRequestWithBody generates requests for PutReceipts with any type of body
func NewPutReceiptsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVoidReceiptRequest calls the generic PutVoidReceipt builder with application/json body
func NewPutVoidReceiptRequest(server string, body PutVoidReceiptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVoidReceiptRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVoidReceiptRequestWithBody generates requests for PutVoidReceipt with any type of body
func NewPutVoidReceiptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/void-receipt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetReceipts request
	GetReceiptsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReceiptsResponse, error)

	// PutReceipts request with any body
	PutReceiptsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReceiptsResponse, error)

	PutReceiptsWithResponse(ctx context.Context, body PutReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReceiptsResponse, error)

	// PutVoidReceipt request with any body
	PutVoidReceiptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVoidReceiptResponse, error)

	PutVoidReceiptWithResponse(ctx context.Context, body PutVoidReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVoidReceiptResponse, error)
}

type GetReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Receipt
}

// Status returns HTTPResponse.Status
func (r GetReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipt
	JSON201      *Receipt
}

// Status returns HTTPResponse.Status
func (r PutReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVoidReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVoidReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVoidReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetReceiptsWithResponse request returning *GetReceiptsResponse
func (c *ClientWithResponses) GetReceiptsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReceiptsResponse, error) {
	rsp, err := c.GetReceipts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptsResponse(rsp)
}

// PutReceiptsWithBodyWithResponse request with arbitrary body returning *PutReceiptsResponse
func (c *ClientWithResponses) PutReceiptsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReceiptsResponse, error) {
	rsp, err := c.PutReceiptsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReceiptsResponse(rsp)
}

func (c *ClientWithResponses) PutReceiptsWithResponse(ctx context.Context, body PutReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReceiptsResponse, error) {
	rsp, err := c.PutReceipts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReceiptsResponse(rsp)
}

// PutVoidReceiptWithBodyWithResponse request with arbitrary body returning *PutVoidReceiptResponse
func (c *ClientWithResponses) PutVoidReceiptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVoidReceiptResponse, error) {
	rsp, err := c.PutVoidReceiptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVoidReceiptResponse(rsp)
}

func (c *ClientWithResponses) PutVoidReceiptWithResponse(ctx context.Context, body PutVoidReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVoidReceiptResponse, error) {
	rsp, err := c.PutVoidReceipt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVoidReceiptResponse(rsp)
}

// ParseGetReceiptsResponse parses an HTTP response from a GetReceiptsWithResponse call
func ParseGetReceiptsResponse(rsp *http.Response) (*GetReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutReceiptsResponse parses an HTTP response from a PutReceiptsWithResponse call
func ParsePutReceiptsResponse(rsp *http.Response) (*PutReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutVoidReceiptResponse parses an HTTP response from a PutVoidReceiptWithResponse call
func ParsePutVoidReceiptResponse(rsp *http.Response) (*PutVoidReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVoidReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
