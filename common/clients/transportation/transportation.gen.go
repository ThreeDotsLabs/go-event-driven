// Package transportation provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package transportation

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// BookFlightTicketRequest defines model for BookFlightTicketRequest.
type BookFlightTicketRequest struct {
	CustomerEmail  string             `json:"customer_email"`
	FlightId       openapi_types.UUID `json:"flight_id"`
	IdempotencyKey string             `json:"idempotency_key"`
	PassengerNames []string           `json:"passenger_names"`
	ReferenceId    string             `json:"reference_id"`
}

// BookFlightTicketResponse defines model for BookFlightTicketResponse.
type BookFlightTicketResponse struct {
	TicketIds []openapi_types.UUID `json:"ticket_ids"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// FlightTicket defines model for FlightTicket.
type FlightTicket struct {
	Cancelled     bool               `json:"cancelled"`
	CustomerEmail string             `json:"customer_email"`
	FlightId      openapi_types.UUID `json:"flight_id"`
	PassengerName string             `json:"passenger_name"`
	ReferenceId   string             `json:"reference_id"`
	TicketId      openapi_types.UUID `json:"ticket_id"`
}

// TaxiBooking defines model for TaxiBooking.
type TaxiBooking struct {
	BookingId          openapi_types.UUID `json:"booking_id"`
	Cancelled          bool               `json:"cancelled"`
	CustomerEmail      string             `json:"customer_email"`
	IdempotencyKey     string             `json:"idempotency_key"`
	NumberOfPassengers int                `json:"number_of_passengers"`
	PassengerName      string             `json:"passenger_name"`
	ReferenceId        string             `json:"reference_id"`
}

// TaxiBookingRequest defines model for TaxiBookingRequest.
type TaxiBookingRequest struct {
	CustomerEmail      string `json:"customer_email"`
	IdempotencyKey     string `json:"idempotency_key"`
	NumberOfPassengers int    `json:"number_of_passengers"`
	PassengerName      string `json:"passenger_name"`
	ReferenceId        string `json:"reference_id"`
}

// TaxiBookingResponse defines model for TaxiBookingResponse.
type TaxiBookingResponse struct {
	BookingId openapi_types.UUID `json:"booking_id"`
}

// PutFlightTicketsJSONRequestBody defines body for PutFlightTickets for application/json ContentType.
type PutFlightTicketsJSONRequestBody = BookFlightTicketRequest

// PutTaxiBookingJSONRequestBody defines body for PutTaxiBooking for application/json ContentType.
type PutTaxiBookingJSONRequestBody = TaxiBookingRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFlightTickets request
	GetFlightTickets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFlightTickets request with any body
	PutFlightTicketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFlightTickets(ctx context.Context, body PutFlightTicketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFlightTicketsTicketId request
	DeleteFlightTicketsTicketId(ctx context.Context, ticketId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxiBooking request
	GetTaxiBooking(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTaxiBooking request with any body
	PutTaxiBookingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTaxiBooking(ctx context.Context, body PutTaxiBookingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxiBookingBookingId request
	DeleteTaxiBookingBookingId(ctx context.Context, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFlightTickets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlightTicketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlightTicketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlightTicketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlightTickets(ctx context.Context, body PutFlightTicketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlightTicketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFlightTicketsTicketId(ctx context.Context, ticketId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFlightTicketsTicketIdRequest(c.Server, ticketId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxiBooking(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxiBookingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxiBookingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxiBookingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxiBooking(ctx context.Context, body PutTaxiBookingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxiBookingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxiBookingBookingId(ctx context.Context, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxiBookingBookingIdRequest(c.Server, bookingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFlightTicketsRequest generates requests for GetFlightTickets
func NewGetFlightTicketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flight-tickets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFlightTicketsRequest calls the generic PutFlightTickets builder with application/json body
func NewPutFlightTicketsRequest(server string, body PutFlightTicketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFlightTicketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutFlightTicketsRequestWithBody generates requests for PutFlightTickets with any type of body
func NewPutFlightTicketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flight-tickets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFlightTicketsTicketIdRequest generates requests for DeleteFlightTicketsTicketId
func NewDeleteFlightTicketsTicketIdRequest(server string, ticketId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ticket_id", runtime.ParamLocationPath, ticketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flight-tickets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxiBookingRequest generates requests for GetTaxiBooking
func NewGetTaxiBookingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxi-booking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTaxiBookingRequest calls the generic PutTaxiBooking builder with application/json body
func NewPutTaxiBookingRequest(server string, body PutTaxiBookingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTaxiBookingRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTaxiBookingRequestWithBody generates requests for PutTaxiBooking with any type of body
func NewPutTaxiBookingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxi-booking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxiBookingBookingIdRequest generates requests for DeleteTaxiBookingBookingId
func NewDeleteTaxiBookingBookingIdRequest(server string, bookingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "booking_id", runtime.ParamLocationPath, bookingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxi-booking/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFlightTickets request
	GetFlightTicketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFlightTicketsResponse, error)

	// PutFlightTickets request with any body
	PutFlightTicketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlightTicketsResponse, error)

	PutFlightTicketsWithResponse(ctx context.Context, body PutFlightTicketsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlightTicketsResponse, error)

	// DeleteFlightTicketsTicketId request
	DeleteFlightTicketsTicketIdWithResponse(ctx context.Context, ticketId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteFlightTicketsTicketIdResponse, error)

	// GetTaxiBooking request
	GetTaxiBookingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaxiBookingResponse, error)

	// PutTaxiBooking request with any body
	PutTaxiBookingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxiBookingResponse, error)

	PutTaxiBookingWithResponse(ctx context.Context, body PutTaxiBookingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxiBookingResponse, error)

	// DeleteTaxiBookingBookingId request
	DeleteTaxiBookingBookingIdWithResponse(ctx context.Context, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTaxiBookingBookingIdResponse, error)
}

type GetFlightTicketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlightTicket
}

// Status returns HTTPResponse.Status
func (r GetFlightTicketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlightTicketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFlightTicketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BookFlightTicketResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutFlightTicketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFlightTicketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFlightTicketsTicketIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFlightTicketsTicketIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFlightTicketsTicketIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxiBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaxiBooking
}

// Status returns HTTPResponse.Status
func (r GetTaxiBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxiBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTaxiBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TaxiBookingResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutTaxiBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTaxiBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxiBookingBookingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaxiBookingBookingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxiBookingBookingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFlightTicketsWithResponse request returning *GetFlightTicketsResponse
func (c *ClientWithResponses) GetFlightTicketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFlightTicketsResponse, error) {
	rsp, err := c.GetFlightTickets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlightTicketsResponse(rsp)
}

// PutFlightTicketsWithBodyWithResponse request with arbitrary body returning *PutFlightTicketsResponse
func (c *ClientWithResponses) PutFlightTicketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlightTicketsResponse, error) {
	rsp, err := c.PutFlightTicketsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlightTicketsResponse(rsp)
}

func (c *ClientWithResponses) PutFlightTicketsWithResponse(ctx context.Context, body PutFlightTicketsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlightTicketsResponse, error) {
	rsp, err := c.PutFlightTickets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlightTicketsResponse(rsp)
}

// DeleteFlightTicketsTicketIdWithResponse request returning *DeleteFlightTicketsTicketIdResponse
func (c *ClientWithResponses) DeleteFlightTicketsTicketIdWithResponse(ctx context.Context, ticketId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteFlightTicketsTicketIdResponse, error) {
	rsp, err := c.DeleteFlightTicketsTicketId(ctx, ticketId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFlightTicketsTicketIdResponse(rsp)
}

// GetTaxiBookingWithResponse request returning *GetTaxiBookingResponse
func (c *ClientWithResponses) GetTaxiBookingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaxiBookingResponse, error) {
	rsp, err := c.GetTaxiBooking(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxiBookingResponse(rsp)
}

// PutTaxiBookingWithBodyWithResponse request with arbitrary body returning *PutTaxiBookingResponse
func (c *ClientWithResponses) PutTaxiBookingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxiBookingResponse, error) {
	rsp, err := c.PutTaxiBookingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxiBookingResponse(rsp)
}

func (c *ClientWithResponses) PutTaxiBookingWithResponse(ctx context.Context, body PutTaxiBookingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxiBookingResponse, error) {
	rsp, err := c.PutTaxiBooking(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxiBookingResponse(rsp)
}

// DeleteTaxiBookingBookingIdWithResponse request returning *DeleteTaxiBookingBookingIdResponse
func (c *ClientWithResponses) DeleteTaxiBookingBookingIdWithResponse(ctx context.Context, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTaxiBookingBookingIdResponse, error) {
	rsp, err := c.DeleteTaxiBookingBookingId(ctx, bookingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxiBookingBookingIdResponse(rsp)
}

// ParseGetFlightTicketsResponse parses an HTTP response from a GetFlightTicketsWithResponse call
func ParseGetFlightTicketsResponse(rsp *http.Response) (*GetFlightTicketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlightTicketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlightTicket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutFlightTicketsResponse parses an HTTP response from a PutFlightTicketsWithResponse call
func ParsePutFlightTicketsResponse(rsp *http.Response) (*PutFlightTicketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFlightTicketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BookFlightTicketResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteFlightTicketsTicketIdResponse parses an HTTP response from a DeleteFlightTicketsTicketIdWithResponse call
func ParseDeleteFlightTicketsTicketIdResponse(rsp *http.Response) (*DeleteFlightTicketsTicketIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFlightTicketsTicketIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaxiBookingResponse parses an HTTP response from a GetTaxiBookingWithResponse call
func ParseGetTaxiBookingResponse(rsp *http.Response) (*GetTaxiBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxiBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaxiBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTaxiBookingResponse parses an HTTP response from a PutTaxiBookingWithResponse call
func ParsePutTaxiBookingResponse(rsp *http.Response) (*PutTaxiBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTaxiBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TaxiBookingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteTaxiBookingBookingIdResponse parses an HTTP response from a DeleteTaxiBookingBookingIdWithResponse call
func ParseDeleteTaxiBookingBookingIdResponse(rsp *http.Response) (*DeleteTaxiBookingBookingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxiBookingBookingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
